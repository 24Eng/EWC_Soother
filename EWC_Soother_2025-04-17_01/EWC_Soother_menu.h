/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#ifndef MENU_GENERATED_CODE_H
#define MENU_GENERATED_CODE_H

#include <Arduino.h>
#include <tcMenu.h>
#include "tcMenuTfteSpi.h"
#include <IoAbstraction.h>
#include <EepromItemStorage.h>
#include <ArduinoEEPROMAbstraction.h>

// variables we declare that you may need to access
extern const PROGMEM ConnectorLocalInfo applicationInfo;
extern TFT_eSPI tft;
extern TfteSpiDrawable tftDrawable;
extern GraphicsDeviceRenderer renderer;

// Any externals needed by IO expanders, EEPROMs etc


// Global Menu Item exports
extern EnumMenuItem menuBluetooth;
extern AnalogMenuItem menuLoopTimeout;
extern AnalogMenuItem menuDelayBetweenLoops;
extern ActionMenuItem menuStartNew;
extern BooleanMenuItem menuLoopOnOrOff;
extern BackMenuItem menuBackLooping;
extern SubMenuItem menuLooping;
extern AnalogMenuItem menuOctave10ToChannel;
extern AnalogMenuItem menuOctave10ToOctave;
extern AnalogMenuItem menuOctave9ToChannel;
extern AnalogMenuItem menuOctave9ToOctave;
extern AnalogMenuItem menuOctave8ToChannel;
extern AnalogMenuItem menuOctave8ToOctave;
extern AnalogMenuItem menuOctave7ToChannel;
extern AnalogMenuItem menuOctave7ToOctave;
extern AnalogMenuItem menuOctave6ToChannel;
extern AnalogMenuItem menuOctave6ToOctave;
extern AnalogMenuItem menuOctave5ToChannel;
extern AnalogMenuItem menuOctave5ToOctave;
extern AnalogMenuItem menuOctave4ToChannel;
extern AnalogMenuItem menuOctave4ToOctave;
extern AnalogMenuItem menuOctave3ToChannel;
extern AnalogMenuItem menuOctave3ToOctave;
extern AnalogMenuItem menuOctave2ToChannel;
extern AnalogMenuItem menuOctave2ToOctave;
extern AnalogMenuItem menuOctave1ToChannel;
extern AnalogMenuItem menuOctave1ToOctave;
extern AnalogMenuItem menuOctave0ToChannel;
extern AnalogMenuItem menuOctave0ToOctave;
extern BackMenuItem menuBackOctaveAssignments;
extern SubMenuItem menuOctaveAssignments;
extern AnalogMenuItem menuPitchCeiling;
extern AnalogMenuItem menuPitchFloor;
extern BooleanMenuItem menuPitchLimOnOrOff;
extern BackMenuItem menuBackPitchLimiting;
extern SubMenuItem menuPitchLimiting;
extern AnalogMenuItem menuVelocityCeiling;
extern AnalogMenuItem menuVelocityFloor;
extern BooleanMenuItem menuVelLimOnOrOff;
extern BackMenuItem menuBackVelocityLimiting;
extern SubMenuItem menuVelocityLimiting;
extern EnumMenuItem menuAutoPlay;
extern EnumMenuItem menuSelect;
extern BackMenuItem menuBackChords;
extern SubMenuItem menuChords;
extern EnumMenuItem menuSLPrandoMenu;
extern EnumMenuItem menuScaleSelect;
extern BackMenuItem menuBackScales;
extern SubMenuItem menuScales;
extern ActionMenuItem menuPANIC;
extern EnumMenuItem menuInstChannel15;
extern EnumMenuItem menuInstChannel14;
extern EnumMenuItem menuInstChannel13;
extern EnumMenuItem menuInstChannel12;
extern EnumMenuItem menuInstChannel11;
extern EnumMenuItem menuInstChannel10;
extern EnumMenuItem menuInstChannel8;
extern EnumMenuItem menuInstChannel7;
extern EnumMenuItem menuInstChannel6;
extern EnumMenuItem menuInstChannel5;
extern EnumMenuItem menuInstChannel4;
extern EnumMenuItem menuInstChannel3;
extern EnumMenuItem menuInstChannel2;
extern EnumMenuItem menuInstChannel1;
extern EnumMenuItem menuInstChannel0;
extern BackMenuItem menuBackInstruments;
extern SubMenuItem menuInstruments;
extern BooleanMenuItem menuBypass;

// Provide a wrapper to get hold of the root menu item and export setupMenu
inline MenuItem& rootMenuItem() { return menuBypass; }
void setupMenu();

// Callback functions must always include CALLBACK_FUNCTION after the return type
#define CALLBACK_FUNCTION

void CALLBACK_FUNCTION BluetoothOptions(int id);
void CALLBACK_FUNCTION BypassIncSerial(int id);
void CALLBACK_FUNCTION ChordAutoPlay(int id);
void CALLBACK_FUNCTION ChordSelect(int id);
void CALLBACK_FUNCTION LoopDelayMS(int id);
void CALLBACK_FUNCTION LoopingOn(int id);
void CALLBACK_FUNCTION Octave0ReassignChannel(int id);
void CALLBACK_FUNCTION Octave0ReassignOctave(int id);
void CALLBACK_FUNCTION Octave10ReassignChannel(int id);
void CALLBACK_FUNCTION Octave10ReassignOctave(int id);
void CALLBACK_FUNCTION Octave1ReassignChannel(int id);
void CALLBACK_FUNCTION Octave1ReassignOctave(int id);
void CALLBACK_FUNCTION Octave2ReassignChannel(int id);
void CALLBACK_FUNCTION Octave2ReassignOctave(int id);
void CALLBACK_FUNCTION Octave3ReassignChannel(int id);
void CALLBACK_FUNCTION Octave3ReassignOctave(int id);
void CALLBACK_FUNCTION Octave4ReassignChannel(int id);
void CALLBACK_FUNCTION Octave4ReassignOctave(int id);
void CALLBACK_FUNCTION Octave5ReassignChannel(int id);
void CALLBACK_FUNCTION Octave5ReassignOctave(int id);
void CALLBACK_FUNCTION Octave6ReassignChannel(int id);
void CALLBACK_FUNCTION Octave6ReassignOctave(int id);
void CALLBACK_FUNCTION Octave7ReassignChannel(int id);
void CALLBACK_FUNCTION Octave7ReassignOctave(int id);
void CALLBACK_FUNCTION Octave8ReassignChannel(int id);
void CALLBACK_FUNCTION Octave8ReassignOctave(int id);
void CALLBACK_FUNCTION Octave9ReassignChannel(int id);
void CALLBACK_FUNCTION Octave9ReassignOctave(int id);
void CALLBACK_FUNCTION PitchLimCeiling(int id);
void CALLBACK_FUNCTION PitchLimFloor(int id);
void CALLBACK_FUNCTION PitchLimOn(int id);
void CALLBACK_FUNCTION PrepareForNewLoop(int id);
void CALLBACK_FUNCTION VelocityCeiling(int id);
void CALLBACK_FUNCTION VelocityFloor(int id);
void CALLBACK_FUNCTION VelocityLimOn(int id);
void CALLBACK_FUNCTION instrumentChangeChannel0(int id);
void CALLBACK_FUNCTION instrumentChangeChannel1(int id);
void CALLBACK_FUNCTION instrumentChangeChannel10(int id);
void CALLBACK_FUNCTION instrumentChangeChannel11(int id);
void CALLBACK_FUNCTION instrumentChangeChannel12(int id);
void CALLBACK_FUNCTION instrumentChangeChannel13(int id);
void CALLBACK_FUNCTION instrumentChangeChannel14(int id);
void CALLBACK_FUNCTION instrumentChangeChannel15(int id);
void CALLBACK_FUNCTION instrumentChangeChannel2(int id);
void CALLBACK_FUNCTION instrumentChangeChannel3(int id);
void CALLBACK_FUNCTION instrumentChangeChannel4(int id);
void CALLBACK_FUNCTION instrumentChangeChannel5(int id);
void CALLBACK_FUNCTION instrumentChangeChannel6(int id);
void CALLBACK_FUNCTION instrumentChangeChannel7(int id);
void CALLBACK_FUNCTION instrumentChangeChannel8(int id);
void CALLBACK_FUNCTION scalePrandom(int id);
void CALLBACK_FUNCTION scaleType(int id);
void CALLBACK_FUNCTION startToPanic(int id);

#endif // MENU_GENERATED_CODE_H
